name: CI Build
on: 
  pull_request:
    branches: [dev]

jobs:
  builder:
    env:
      REGISTRY: ghcr.io
      BUILDER_IMAGE_BASE: ghcr.io/draios/sysdig-builder-pr
      BUILDER_DEV: ghcr.io/draios/sysdig-builder:dev

    runs-on: ubuntu-latest
    steps:
      - name: Checkout Sysdig
        uses: actions/checkout@v3

      - name: Check if builder is modified
        id: builder-files
        uses: tj-actions/changed-files@v10.1
        with:
          files: |
            ^docker/builder

      - name: Set up QEMU
        if: steps.builder-files.outputs.any_changed == 'true'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: 'amd64,arm64'

      - name: Set up Docker Buildx
        if: steps.builder-files.outputs.any_changed == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Login to Github Packages
        if: steps.builder-files.outputs.any_changed == 'true'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get new builder image tag
        id: get-new-builder
        if: steps.builder-files.outputs.any_changed == 'true'
        run: |
          echo "::set-output name=builder_image::${{ env.BUILDER_IMAGE_BASE }}:${{ github.event.pull_request.number }}"

      - name: Build new builder
        id: build-builder
        if: steps.builder-files.outputs.any_changed == 'true'
        uses: docker/build-push-action@v3
        with:
          context: docker/builder
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.get-new-builder.outputs.builder_image }}
          push: true

    outputs:
      builder_image: ${{ (steps.builder-files.outputs.any_changed == 'true') && steps.get-new-builder.outputs.builder_image || env.BUILDER_DEV }}

  build-sysdig-linux-amd64:
    needs: builder
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.builder.outputs.builder_image }}
    steps:
      - name: Checkout Sysdig
        uses: actions/checkout@v3
        with:
          path: sysdig
      - name: Link paths
        run: |
          mkdir -p /source
          ln -s "$GITHUB_WORKSPACE/sysdig" /source/sysdig
      - name: Build
        run: build cmake
      - name: Build packages
        run: build package

  build-sysdig-linux-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Sysdig
        uses: actions/checkout@v3
        with:
          path: sysdig
      - uses: uraimo/run-on-arch-action@v2.2.0
        name: Build for aarch64 (system deps)
        with:
          arch: aarch64
          distro: buster
          githubToken: ${{ github.token }}
          install: |
            apt update && apt install -y --no-install-recommends ca-certificates cmake build-essential clang llvm git pkg-config autoconf automake libtool libelf-dev wget libb64-dev libc-ares-dev libcurl4-openssl-dev libssl-dev libtbb-dev libjq-dev libjsoncpp-dev libgrpc++-dev protobuf-compiler-grpc libgtest-dev libprotobuf-dev liblua5.1-dev libyaml-cpp-dev nlohmann-json3-dev libncurses-dev linux-headers-arm64
          run: |
            git config --global --add safe.directory ${{ github.workspace }}/sysdig
            cd ${{ github.workspace }}/sysdig
            mkdir -p build
            cd build && cmake -DBUILD_BPF=On -DUSE_BUNDLED_DEPS=False ../
            KERNELDIR=/lib/modules/$(ls /lib/modules)/build make -j4

  build-sysdig-others-amd64:
    name: build-sysdig-other-amd64
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Sysdig
        uses: actions/checkout@v3
      - name: Build
        run: |
          mkdir -p build
          cd build && cmake -Wno-dev -DBUILD_DRIVER=OFF ..
          cmake --build . --target package
